import * as chai from 'chai';
import * as request from 'supertest';
import { RoutePath } from '../../src/config/routePath';
import { createAccessToken } from '../helpers';
import { {{Module}}Model as Model } from '../../src/Model/{{Module}}';
import { {{Module}} } from '../../src/Poco/{{Module}}';
import { preloadedFixtures, stagedFixtures } from '../fixtures/{{module}}';
const { expect } = chai;

chai.should();

describe('{{Module}} endpoints:', () => {
	let app = null;
	const assertion = {
		post: `POST ${RoutePath.{{Module}}} should return 201`,
		getId: `GET ${RoutePath.{{Module}}_Id} should return 200 for a registered {{module}}`,
		get: `GET ${RoutePath.{{Module}}} should return 200 for List {{pluralModule}}`,
		put: `PUT ${RoutePath.{{Module}}_Id} should return 200`,
		delete: `DELETE ${RoutePath.{{Module}}_Id} should return 200`,
	};

	before(async () => {
		// ensure Collection is empty
		await Model.remove({}).exec();

		// fill initial fixtures
		await Model.insertMany(preloadedFixtures);
	});

	after(async () => {
		await Model.remove({}).exec();
	});

	beforeEach(async () => {
		const widget = await import('../../src/app');

		app = widget.app;
	});

	afterEach(done => {
		app = null;

		done();
	});

	it(assertion.post, done => {
		const url = RoutePath.{{Module}};
		const payload = stagedFixtures.{{module}}1;
		const dummyPoco = new {{Module}}();

		request(app)
			.post(url)
			.expect(201)
			.send(payload)
			.end((err, { body }) => {
				if (err) {
					return done(err);
				}

				expect(body).to.be.an('object');
				expect(body).to.have.all.keys('message', 'data');

				expect(body.message).to.be.equal('Resource created');

				expect(body.data).to.be.an('object');
				expect(body.data).to.have.all.keys(Object.keys(dummyPoco));

				/* add 4 more Specific assertions here*/

				done();
			});
	});

	it(assertion.getId, done => {
		const [sel{{Module}}] = preloadedFixtures;
		const url = RoutePath.{{Module}}_Id.replace(':id', sel{{Module}}._id);
		const token = createAccessToken();
		const dummyPoco = new {{Module}}();

		request(app)
			.get(url)
			.set('Authorization', token)
			.expect(200)
			.end((err, { body }) => {
				if (err) {
					return done(err);
				}

				expect(body).to.be.an('object');
				expect(body).to.have.all.keys('message', 'data');

				expect(body.message).to.be.equal('Resource found');

				expect(body.data).to.be.an('object');
				expect(body.data).to.have.all.keys(Object.keys(dummyPoco));

				/* add 4 more Specific assertions here*/

				done();
			});
	});

	it(assertion.get, done => {
		const url = RoutePath.{{Module}};
		const token = createAccessToken(1);
		const dummyPoco = new {{Module}}();

		request(app)
			.get(url)
			.set('Authorization', token)
			.expect(200)
			.end((err, { body }) => {
				if (err) {
					return done(err);
				}

				expect(body).to.be.an('object');
				expect(body).to.have.all.keys('message', 'data', 'paging');

				expect(body.message).to.be.equal('Resource found');
				expect(body.data).to.be.an('array');
				expect(body.paging).to.be.an('object');

				body.data.forEach(row => {
					expect(row).to.have.all.keys(Object.keys(dummyPoco));

					/* add 4 more Specific assertions here*/

				});

				expect(body.paging).to.have.all.keys('count', 'prev', 'next');
				expect(body.paging.count).to.be.a('number');
				expect(body.paging.prev).to.be.oneOf(['string', null]);
				expect(body.paging.next).to.be.oneOf(['string', null]);

				done();
			});
	});

	it(assertion.put, done => {
		const [stored{{Module}}] = preloadedFixtures;
		const url = RoutePath.{{Module}}_Id.replace(':id', stored{{Module}}._id);
		const token = createAccessToken(2);
		const payload = stagedFixtures.{{module}}2;
		const dummyPoco = new {{Module}}();

		request(app)
			.put(url)
			.expect(200)
			.set('Authorization', token)
			.send(payload)
			.end((err, { body }) => {
				if (err) {
					return done(err);
				}

				expect(body).to.be.an('object');
				expect(body).to.have.all.keys('message', 'data');

				expect(body.message).to.be.equal('Resource updated');

				expect(body.data).to.be.an('object');
				expect(body.data).to.have.all.keys(Object.keys(dummyPoco));

				/* add 4 more Specific assertions here*/

				done();
			});
	});

	it(assertion.delete, done => {
		const [, , sel{{Module}}] = preloadedFixtures;
		const url = RoutePath.{{Module}}_Id.replace(':id', sel{{Module}}._id);
		const token = createAccessToken(3);
		const dummyPoco = new {{Module}}();

		request(app)
			.delete(url)
			.set('Authorization', token)
			.expect(200)
			.end((err, { body }) => {
				if (err) {
					return done(err);
				}

				expect(body).to.be.an('object');
				expect(body).to.have.all.keys('message', 'data');

				expect(body.message).to.be.equal('Resource deleted');

				expect(body.data).to.be.an('object');
				expect(body.data).to.have.all.keys(Object.keys(dummyPoco));

				/* add 4 more Specific assertions here*/

				done();
			});
	});
});
