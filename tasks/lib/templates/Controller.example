import { ICrudController } from '../Lib/interfaces';
import { IGetAll{{Module}}, {{Module}}Repository } from '../Repository/{{Module}}';
import { {{Module}} } from '../Poco/{{Module}}';
import { schemaValidator } from '../Lib/schemaValidator';
import { new{{Module}}Schema, update{{Module}}Schema } from '../Dto/{{Module}}';
import { findEntitySchema, listEntitySchema } from '../Dto/globalService';
import { parseSort } from '../Lib/parseSort';
// only for debugging
// import { dd, dump , die } from '../Lib/Debug';

/* {{Module}} Controller Class */
export class {{Module}}Controller implements ICrudController {
	static getInstance(): {{Module}}Controller {
		return new {{Module}}Controller;
	}

	async createAction(params: any): Promise<any> {
		const dto = schemaValidator(params, new{{Module}}Schema, true);
		const poco = new {{Module}}(dto);

		return await {{Module}}Repository.getInstance().Create(poco);
	}

	async editAction(params: any): Promise<{{Module}}> {
		const dto = schemaValidator(params, update{{Module}}Schema, true);
		const poco = new {{Module}}(dto);

		return await {{Module}}Repository.getInstance().Update(poco);
	}

	async listAction(params: any): Promise<IGetAll{{Module}}> {
		const dto = schemaValidator(params, listEntitySchema, true);
		const query = parseSort(dto);

		return await {{Module}}Repository.getInstance().GetAll(query);
	}

	async showAction(params: any): Promise<{{Module}}> {
		const dto = schemaValidator(params, findEntitySchema, true);

		return await {{Module}}Repository.getInstance().GetById(dto);
	}

	async deleteAction(params: any): Promise<{{Module}}> {
		const dto = schemaValidator(params, findEntitySchema, true);

		return await {{Module}}Repository.getInstance().Delete(dto);
	}
}
