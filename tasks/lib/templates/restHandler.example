import { Request, Response } from 'express';
import { ReqResHandler } from '../../System/ReqResHandler';
import { restJwtAuth } from '../../Middleware/jwtAuth';
import { {{Module}}Controller as controller } from '../../Controller/{{Module}}';
import { RestHandler, Endpoint } from '../../System/decorators';
import { RoutePath } from '../../config/routePath';

@RestHandler // <- Transform static methods on class on to Express routers
export default class {{Module}}Handler {
	@Endpoint(RoutePath.{{Module}}, restJwtAuth)
	static async post_{{module}}(req: Request, res: Response): Promise<Response> {
		const handUtil = new ReqResHandler(req, res);
		const params = handUtil.mapReqToObject('body');

		try {
			const data = await controller.getInstance().createAction(params);
			return handUtil.SuccessJsonResponse(data);
		} catch (E) {
			return handUtil.ErrorJsonResponse(E);
		}
	}

	@Endpoint(RoutePath.{{Module}}, restJwtAuth)
	static async get_{{pluralModule}}(req: Request, res: Response): Promise<Response> {
		const handUtil = new ReqResHandler(req, res);
		const params = handUtil.mapReqToObject('query');

		try {
			const data = await controller.getInstance().listAction(params);
			return handUtil.SuccessJsonResponse(data);
		} catch (E) {
			return handUtil.ErrorJsonResponse(E);
		}
	}

	@Endpoint(RoutePath.{{Module}}_Id, restJwtAuth)
	static async get_{{module}}(req: Request, res: Response): Promise<Response> {
		const handUtil = new ReqResHandler(req, res);
		const params = handUtil.mapReqToObject('params');

		try {
			const data = await controller.getInstance().showAction(params);
			return handUtil.SuccessJsonResponse(data);
		} catch (E) {
			return handUtil.ErrorJsonResponse(E);

		}
	}

	@Endpoint(RoutePath.{{Module}}_Id, restJwtAuth)
	static async put_{{module}}(req: Request, res: Response): Promise<Response> {
		const handUtil = new ReqResHandler(req, res);
		const params = handUtil.mapReqToObject('params,body');

		try {
			const data = await controller.getInstance().editAction(params);
			return handUtil.SuccessJsonResponse(data);
		} catch (E) {
			return handUtil.ErrorJsonResponse(E);

		}
	}

	@Endpoint(RoutePath.{{Module}}_Id, restJwtAuth)
	static async delete_{{module}}(req: Request, res: Response): Promise<Response> {
		const handUtil = new ReqResHandler(req, res);
		const params = handUtil.mapReqToObject('params');

		try {
			const data = await controller.getInstance().deleteAction(params);
			return handUtil.SuccessJsonResponse(data);
		} catch (E) {
			return handUtil.ErrorJsonResponse(E);
		}
	}
}
